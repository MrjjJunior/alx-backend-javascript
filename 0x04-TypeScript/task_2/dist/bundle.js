!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t){var o=function(){function e(){}return e.prototype.workFromHome=function(){return"Working from home"},e.prototype.getCoffeBreak=function(){return"Getting a coffee break"},e.prototype.workDirectorTasks=function(){return"Getting to director tasks"},e}(),n=function(){function e(){}return e.prototype.workFromHome=function(){return"Cannot work from home"},e.prototype.getCoffeeBreak=function(){return"Cannot have a break"},e.prototype.workTeacherTasks=function(){return"Getting to work"},e}();function r(e){return"number"==typeof e&&e<500?new n:new o}function u(e){return"Math"===e?"Teaching Math":"History"===e?"Teaching History":void 0}console.log(r(200)),console.log(r(1e3)),console.log(r("$500")),console.log(u("Math")),console.log(u("History"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,